#!/bin/bash
#Cronjob
#0 * * * *       /data/rotate
#Version 1.0 Initial Release 9-30-2016
##########################################################
#Version 1.1 Updated 10-3-16 Casey Parman
#Added Extra Checks to ensure that the Date Prefix is correct. before renaming the file, if it fails though all the checks then the file is not renamed, and an email alert is sent.
##########################################################
#Version 1.2 Updates 10-12-16 Casey Parman
#Added variables for failed rotates, renaming the file failed#.log in case of multiple failures.
#Version 1.3 Updates 11-8-16
#Updated Failure to place time in failed rotate log
#Version 1.4 Updates 12-14-16
#Changing split form size to number of lines.  (lines equal 180M)
#Version 1.5 Updates 12/20/16
#Removes root
#Version 1.6 Updates 8/16/18
#Removed Reading second line for PREFIX Variable, now only reading 1st line.
#Version 1.7 Updates 8/16/18
#Changed FRN to 1, to read the one and only line, we really dont need this, but I am not removing it.

ROOTFOLDER=/data/syslog #setting root folder.
REGEX="[0-9]{2}:[0-9]{2}:[0-9]{2}"
FAILED=1
TIME=$(date +%H%M%S)
for f in $(ls $ROOTFOLDER)  #folder for loop
#f = Syslog source folder.
do
if [ $f != "imjournal.state" ]  #Do nothing and go to the next if the imjournal.state file is within the folder.
then
        for d in $(ls $ROOTFOLDER/$f/)  #Loop though all Log Files  #OLD for d in $(ls $ROOTFOLDER/$f/*.log)
        #$d=log files #This is being pulled as full path
        do
        if [[ $d == *.log ]]  #Checking to see if $d is a log file, and not a folder.  Yes this can be done differently... might change it to if not a directory statement, but this will work.
        then
                FOLDER=$(echo $ROOTFOLDER/$f/$d| cut -d - -f2- | cut -d . -f1)  #Getting only the Dates
                #$FOLDER = Dated folder for archive
                if [[ ! -d $ROOTFOLDER/$f/$FOLDER ]]   #Checking to see if the folder exist.
                then
                        mkdir $ROOTFOLDER/$f/$FOLDER    #Making folder if it does not exist.
                fi
                v=$(date +%Y-%m-%d)
                mv $ROOTFOLDER/$f/$d $ROOTFOLDER/$f/$FOLDER/.   #moving the Log file to the new folder created to allow us to break it up.   This worked...
                #if [[ $d == *$v.log ]]  #Check if this log is todays, if so restart syslog, like a boss.
                #then
                #Removed because the script runs to quick.
                #fi
            split -l 1000000 $ROOTFOLDER/$f/$FOLDER/$d $ROOTFOLDER/$f/$FOLDER/ #Spiting the file that is now in the Dated Folder.
           echo "file split successfully"
                rm -f $ROOTFOLDER/$f/$FOLDER/$d  #Remove old files (Not enabled during testing)  This actually doesnt matter because I'm an idiot and we're moving the file...
                for i in $(ls $ROOTFOLDER/$f/$FOLDER)   #Removing all split junk and renaming it to the time of first log.
                        #$i= split files
                do
                        if [[ $i != *.log ]] #Making sure I'm not manipulating the log file...  This wont be required when line 25 is uncommented.
                        then
                                PREFIX=$(head -1 $ROOTFOLDER/$f/$FOLDER/$i | cut -d " " -f3 | awk 'FNR==1 {print $1}')  #Setting New name PREFIX. Pulling information from new files.
                                if [[  $PREFIX =~ $REGEX ]]   #Make sure Prefix is Date, not from the middle of another line.
                                then
                                        FILENAME=$(echo $PREFIX | sed 's/://g')  #Removing : from time replacing it with nothing.
                                    mv $ROOTFOLDER/$f/$FOLDER/$i $ROOTFOLDER/$f/$FOLDER/$FILENAME.log  #Move split name to time name.
                                    chmod 640 $ROOTFOLDER/$f/$FOLDER/$FILENAME.log  #changing file permissions
                                    sudo chown beach:issyslog $ROOTFOLDER/$f/$FOLDER/$FILENAME.log # Changing file ownership
                                else  #Just in case the split is in the middle of a log.
                                        PREFIX=$(head -1 $ROOTFOLDER/$f/$FOLDER/$i | cut -d " " -f4 | awk 'FNR==1 {print $1}')  #Grabbing the time off the second line in the file.
                                        if [[  $PREFIX =~ $REGEX ]]
                                        then
                                                FILENAME=$(echo $PREFIX | sed 's/://g')  #Removing : from time replacing it with nothing.
                                                        mv $ROOTFOLDER/$f/$FOLDER/$i $ROOTFOLDER/$f/$FOLDER/$FILENAME.log #Move split name to time name.
                                                        chmod 640 $ROOTFOLDER/$f/$FOLDER/$FILENAME.log  #changing file permissions
                                                sudo chown beach:issyslog $ROOTFOLDER/$f/$FOLDER/$FILENAME.log # Changing file ownership
                                        else
                                            TIME=$(date +%H%M%S-%Y-%M-%d)
                                                echo "File Rename Failed for" $ROOTFOLDER/$f/$FOLDER/$i "File renamed to failed"$FAILED"-"$TIME".log" "File Location:" $ROOTFOLDER/$f/$FOLDER/$FAILED"-"$TIME".log" |  mutt -e 'my_hdr From:Rotate-Failed <rsyslog@stormontvail.org>' -s "Rename Failed" isdatasecurity@stormontvail.org
                                            mv $ROOTFOLDER/$f/$FOLDER/$i $ROOTFOLDER/$f/$FOLDER/failed$FAILED-$TIME.log
                                            FAILED=$(($FAILED + 1))
                                        fi
                                fi  #Finishing if statement that checks prefix and modifies files.
                fi #Finishing if statement making sure log files is not manipulated Remove when removing like 29
                done  #Finish For loop for splitting files and renaming
        fi  #finishing if statement for ensuring it a log file. No else statement.
    done #Finished For loop for listing log files.
  fi
done
echo "done moving files around"
sudo systemctl restart rsyslog  #restart syslog, this allows it to create a new file.
echo "syslog restarted"
